/**
 * Autogenerated by Thrift Compiler (0.9.1)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
#ifndef address_book_thrift_TYPES_H
#define address_book_thrift_TYPES_H

#include <thrift/Thrift.h>
#include <thrift/TApplicationException.h>
#include <thrift/protocol/TProtocol.h>
#include <thrift/transport/TTransport.h>

#include <thrift/cxxfunctional.h>


namespace BenchmarkThrift {

struct PhoneType {
  enum type {
    MOBILE = 0,
    HOME = 1,
    WORK = 2,
    OTHER = 3
  };
};

extern const std::map<int, const char*> _PhoneType_VALUES_TO_NAMES;

typedef struct _PhoneNumber__isset {
  _PhoneNumber__isset() : type(true) {}
  bool type;
} _PhoneNumber__isset;

class PhoneNumber {
 public:

  static const char* ascii_fingerprint; // = "214512252A0944207CAC77897767CC5E";
  static const uint8_t binary_fingerprint[16]; // = {0x21,0x45,0x12,0x25,0x2A,0x09,0x44,0x20,0x7C,0xAC,0x77,0x89,0x77,0x67,0xCC,0x5E};

  PhoneNumber() : number(), type((PhoneType::type)1) {
    type = (PhoneType::type)1;

  }

  virtual ~PhoneNumber() throw() {}

  std::string number;
  PhoneType::type type;

  _PhoneNumber__isset __isset;

  void __set_number(const std::string& val) {
    number = val;
  }

  void __set_type(const PhoneType::type val) {
    type = val;
    __isset.type = true;
  }

  bool operator == (const PhoneNumber & rhs) const
  {
    if (!(number == rhs.number))
      return false;
    if (__isset.type != rhs.__isset.type)
      return false;
    else if (__isset.type && !(type == rhs.type))
      return false;
    return true;
  }
  bool operator != (const PhoneNumber &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const PhoneNumber & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

void swap(PhoneNumber &a, PhoneNumber &b);

typedef struct _Person__isset {
  _Person__isset() : email(false), phone(false) {}
  bool email;
  bool phone;
} _Person__isset;

class Person {
 public:

  static const char* ascii_fingerprint; // = "A138E89FEDE0975F2F08F8C1B737EAD8";
  static const uint8_t binary_fingerprint[16]; // = {0xA1,0x38,0xE8,0x9F,0xED,0xE0,0x97,0x5F,0x2F,0x08,0xF8,0xC1,0xB7,0x37,0xEA,0xD8};

  Person() : name(), id(0), email() {
  }

  virtual ~Person() throw() {}

  std::string name;
  int32_t id;
  std::string email;
  std::vector<PhoneNumber>  phone;

  _Person__isset __isset;

  void __set_name(const std::string& val) {
    name = val;
  }

  void __set_id(const int32_t val) {
    id = val;
  }

  void __set_email(const std::string& val) {
    email = val;
    __isset.email = true;
  }

  void __set_phone(const std::vector<PhoneNumber> & val) {
    phone = val;
  }

  bool operator == (const Person & rhs) const
  {
    if (!(name == rhs.name))
      return false;
    if (!(id == rhs.id))
      return false;
    if (__isset.email != rhs.__isset.email)
      return false;
    else if (__isset.email && !(email == rhs.email))
      return false;
    if (!(phone == rhs.phone))
      return false;
    return true;
  }
  bool operator != (const Person &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const Person & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

void swap(Person &a, Person &b);

typedef struct _AddressBook__isset {
  _AddressBook__isset() : person(false) {}
  bool person;
} _AddressBook__isset;

class AddressBook {
 public:

  static const char* ascii_fingerprint; // = "288696C5A69E7051398675C4B33EA400";
  static const uint8_t binary_fingerprint[16]; // = {0x28,0x86,0x96,0xC5,0xA6,0x9E,0x70,0x51,0x39,0x86,0x75,0xC4,0xB3,0x3E,0xA4,0x00};

  AddressBook() {
  }

  virtual ~AddressBook() throw() {}

  std::vector<Person>  person;

  _AddressBook__isset __isset;

  void __set_person(const std::vector<Person> & val) {
    person = val;
  }

  bool operator == (const AddressBook & rhs) const
  {
    if (!(person == rhs.person))
      return false;
    return true;
  }
  bool operator != (const AddressBook &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const AddressBook & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

void swap(AddressBook &a, AddressBook &b);

} // namespace

#endif
